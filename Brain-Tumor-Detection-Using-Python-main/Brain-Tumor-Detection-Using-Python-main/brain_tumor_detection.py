# -*- coding: utf-8 -*-
"""Brain Tumor Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SRNlZR-nuJrrpaglJGbL2dUpSJNg-G4u

URL for connecting to Local Machine:http://localhost:8889/?token=29c2bafebe16ebc0f0db31a1fc29480dcabb37e0ce7b31a5
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix
import itertools
import os
import shutil
import random
import glob
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter(action='ignore',category=FutureWarning)
# %matplotlib inline

os.getcwd()

import random
if os.path.isdir('train/1/') is False:
  os.mkdir('train')
  os.mkdir('valid')
  os.mkdir('test')
  for i in range(1,4):
    os.mkdir(f'valid/{i}')
    os.mkdir(f'test/{i}')
    shutil.move(f'{i}','train')


    valid_samples=random.sample(os.listdir(f'train/{i}'),30)
    for j in valid_samples:
      shutil.move(f'train/{i}/{j}',f'valid/{i}')

    test_samples=random.sample(os.listdir(f'train/{i}'),5)
    for k in test_samples:
      shutil.move(f'train/{i}/{k}',f'test/{i}')

os.getcwd()

train_path='train'
valid_path='valid'
test_path='test'

"""### **VGG-16**"""

train_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input).flow_from_directory(
  directory=train_path,target_size=(224,224),batch_size=10,classes=['1', '2', '3'])
valid_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input).flow_from_directory(
  directory=valid_path,target_size=(224,224),batch_size=10,classes=['1', '2', '3'])
test_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input).flow_from_directory(
  directory=test_path,target_size=(224,224),batch_size=10,shuffle='False',classes=['1', '2', '3'])

vgg16_model=tf.keras.applications.vgg16.VGG16()

vgg16_model.summary()

type(vgg16_model)

"""***MODIFY  MODEL***"""

VGG_Model=Sequential()
for layer in vgg16_model.layers[:-1]:
  VGG_Model.add(layer)

VGG_Model.summary()

for layer in VGG_Model.layers:
  layer.trainable=False

VGG_Model.add(Dense(units=3,activation='softmax'))

"""***TRAIN MODEL***"""

VGG_Model.compile(optimizer=Adam(learning_rate=0.0001),loss='categorical_crossentropy',metrics=['accuracy'])

VGG_Model.fit(train_batches,validation_data=valid_batches,verbose=2,epochs=10)

"""***PREDICTIONS***"""

prediction=VGG_Model.predict(test_batches,verbose=2)

cm=confusion_matrix(test_labels,y_pred=np.argmax(predictions,axis=-1))

from sklearn.metrics import ConfusionMatrixDisplay

cm_plot_labels=['1-meningioma', '2-glioma', '3-pituitary tumor']
CMD=ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=cm_plot_labels)
CMD.plot()
plt.show()

"""### **MOBILE NETS**"""

cm=confusion_matrix(test_labels,y_pred=np.argmax(prediction,axis=-1))

from sklearn.metrics import ConfusionMatrixDisplay

display_labels=['1-meningioma', '2-glioma', '3-pituitary tumor']
CMD=ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=cm_plot_labels)
CMD.plot()
plt.show()

train_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
  directory=train_path,target_size=(224,224),batch_size=10)
valid_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
  directory=valid_path,target_size=(224,224),batch_size=10)
test_batches= ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_directory(
  directory=test_path,target_size=(224,224),batch_size=10,shuffle='False')

assert train_batches.n==2929
assert valid_batches.n==15
assert test_batches.n==90
assert test_batches.num_classes==train_batches.num_classes==valid_batches.num_classes==3

"""***MODIFY MODEL***"""

model=tf.keras.applications.mobilenet.MobileNet()

model.summary()

"""Getting All layers from 6th layer starting from last, all the way to the top layers"""

Output_6thLayer=model.layers[-1].output

FinalOutput=Dense(units=3,activation='softmax')(Output_6thLayer)

FinalModel=keras.Model(inputs=model.input,outputs=FinalOutput)

"""Making only the last 23 layers trainable"""

for layer in FinalModel.layers[:-23]:
  layer.trainable=False

FinalModel.summary()

"""***TRAIN THE MODEL***"""

FinalModel.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])

FinalModel.fit(x=train_batches,validation_data=valid_batches,verbose=2,epochs=10)

"""***PREDICTIONS***"""

test_labels=test_batches.classes

predictions=FinalModel.predict(x=test_batches,verbose=0)

cm=confusion_matrix(test_labels,y_pred=np.argmax(predictions,axis=-1))

from sklearn.metrics import ConfusionMatrixDisplay

cm_plot_labels=['1-meningioma', '2-glioma', '3-pituitary tumor']
CMD=ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=cm_plot_labels)
CMD.plot()
plt.show()